const User = require("../models/User");
const Review = require("../models/Review");
const Cafe = require("../models/Cafe");

// üè° T·∫°o qu√°n cafe m·ªõi
const createCafe = async (data) => {
  return await Cafe.create(data);
};

// üìú L·∫•y danh s√°ch t·∫•t c·∫£ qu√°n cafe
const getAllCafes = async () => {
  return await Cafe.find();
};

// üîç L·∫•y th√¥ng tin chi ti·∫øt m·ªôt qu√°n cafe theo ID
const getCafeById = async (id) => {
  return await Cafe.findById(id);
};

// ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin qu√°n cafe
const updateCafe = async (id, data) => {
  data.status = "success";
  return await Cafe.findByIdAndUpdate(id, data, {
    new: true,
  });
};

// üóëÔ∏è X√≥a qu√°n cafe
const deleteCafe = async (id) => {
  return await Cafe.findByIdAndDelete(id);
};

// üîé T√¨m qu√°n cafe g·∫ßn v·ªã tr√≠ ng∆∞·ªùi d√πng
// const getCafesNearby = async (longitude, latitude, maxDistance = 5000) => {
//   if (!longitude || !latitude) {
//     throw new Error("Thi·∫øu t·ªça ƒë·ªô (longitude v√† latitude)!");
//   }
//   const lng = parseFloat(longitude);
//   const lat = parseFloat(latitude);
//   if (isNaN(lng) || isNaN(lat)) {
//     throw new Error("T·ªça ƒë·ªô ph·∫£i l√† s·ªë h·ª£p l·ªá");
//   }
//   if (lng < -180 || lng > 180 || lat < -90 || lat > 90) {
//     throw new Error(
//       "T·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá: lng ph·∫£i trong [-180, 180] v√† lat trong [-90, 90]"
//     );
//   }

//   try {
//     const cafes = await Cafe.find({
//       location: {
//         $near: {
//           $geometry: { type: "Point", coordinates: [lng, lat] },
//           $maxDistance: parseInt(maxDistance),
//         },
//       },
//     });
//     return cafes;
//   } catch (err) {
//     throw new Error("L·ªói khi t√¨m qu√°n cafe g·∫ßn v·ªã tr√≠ c·ªßa b·∫°n: " + err.message);
//   }
// };
// const updateCafeRating = async (cafeId) => {
//   try {
//     // L·∫•y t·∫•t c·∫£ review h·ª£p l·ªá (ch·ªâ ƒë·∫øm review c·ªßa user, kh√¥ng ƒë·∫øm admin)
//     const reviews = await Review.find({ cafe: cafeId }).populate("user");
//     const validReviews = reviews.filter(
//       (review) => review.user.role === "user"
//     );

//     const reviewCount = validReviews.length;
//     const averageRating = reviewCount
//       ? validReviews.reduce((sum, review) => sum + review.rating, 0) /
//         reviewCount
//       : 0;

//     // C·∫≠p nh·∫≠t rating v√† s·ªë l∆∞·ª£ng review
//     await Cafe.findByIdAndUpdate(cafeId, {
//       rating: Number(averageRating.toFixed(1)), // Chuy·ªÉn v·ªÅ s·ªë
//       reviewCount: reviewCount,
//       reviews: validReviews.map((r) => r._id), // ƒê·∫£m b·∫£o danh s√°ch review lu√¥n ƒë√∫ng
//     });
//   } catch (err) {
//     throw new Error("L·ªói khi c·∫≠p nh·∫≠t rating: " + err.message);
//   }
// };
// const getCafeMenu = async (cafeId) => {
//   try {
//     const cafe = await Cafe.findById(cafeId).populate("menu");
//     if (!cafe) return null;
//     return cafe.menu;
//   } catch (error) {
//     throw new Error(error.message);
//   }
// };

module.exports = {
  createCafe,
  getAllCafes,
  getCafeById,
  updateCafe,
  deleteCafe,
  // getCafesNearby,
  // updateCafeRating,
  // getCafeMenu,
};
