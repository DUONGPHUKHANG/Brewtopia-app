const Cafe = require("../models/Cafe");
const Review = require("../models/Review");

// üè° T·∫°o qu√°n cafe m·ªõi
const createCafe = async (cafeData) => {
  // Ki·ªÉm tra th√¥ng tin b·∫Øt bu·ªôc
  if (!cafeData.name) {
    throw new Error("T√™n qu√°n cafe kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
  }
  if (!cafeData.address) {
    throw new Error("ƒê·ªãa ch·ªâ qu√°n cafe kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
  }
  if (
    !cafeData.location ||
    !cafeData.location.coordinates ||
    cafeData.location.coordinates.length !== 2
  ) {
    throw new Error("Th√¥ng tin v·ªã tr√≠ qu√°n cafe kh√¥ng h·ª£p l·ªá");
  }

  // Validate t·ªça ƒë·ªô: ph·∫£i l√† s·ªë v√† trong ph·∫°m vi h·ª£p l·ªá
  const [lng, lat] = cafeData.location.coordinates;
  if (typeof lng !== "number" || typeof lat !== "number") {
    throw new Error("T·ªça ƒë·ªô ph·∫£i l√† s·ªë");
  }
  if (lng < -180 || lng > 180 || lat < -90 || lat > 90) {
    throw new Error(
      "T·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá: Kinh ƒë·ªô ph·∫£i trong [-180, 180] v√† vƒ© ƒë·ªô trong [-90, 90]"
    );
  }

  try {
    const cafe = await Cafe.create(cafeData);
    return cafe;
  } catch (err) {
    throw new Error("L·ªói khi t·∫°o qu√°n cafe: " + err.message);
  }
};

// üìú L·∫•y danh s√°ch t·∫•t c·∫£ qu√°n cafe
const getAllCafes = async () => {
  try {
    const cafes = await Cafe.find();
    return cafes;
  } catch (err) {
    throw new Error("L·ªói khi l·∫•y danh s√°ch qu√°n cafe: " + err.message);
  }
};

// üîç L·∫•y th√¥ng tin chi ti·∫øt m·ªôt qu√°n cafe theo ID
const getCafeById = async (id) => {
  if (!id) throw new Error("ID qu√°n cafe kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
  try {
    const cafe = await Cafe.findById(id);
    if (!cafe) {
      throw new Error("Kh√¥ng t√¨m th·∫•y qu√°n cafe v·ªõi ID: " + id);
    }
    return cafe;
  } catch (err) {
    throw new Error("L·ªói khi l·∫•y th√¥ng tin qu√°n cafe: " + err.message);
  }
};

// ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin qu√°n cafe
const updateCafe = async (id, cafeData) => {
  if (!id) throw new Error("ID qu√°n cafe kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");

  // N·∫øu c√≥ c·∫≠p nh·∫≠t location, ki·ªÉm tra d·ªØ li·ªáu
  if (cafeData.location && cafeData.location.coordinates) {
    if (cafeData.location.coordinates.length !== 2) {
      throw new Error("Th√¥ng tin v·ªã tr√≠ kh√¥ng h·ª£p l·ªá");
    }
    const [lng, lat] = cafeData.location.coordinates;
    if (typeof lng !== "number" || typeof lat !== "number") {
      throw new Error("T·ªça ƒë·ªô ph·∫£i l√† s·ªë");
    }
    if (lng < -180 || lng > 180 || lat < -90 || lat > 90) {
      throw new Error(
        "T·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá: Kinh ƒë·ªô ph·∫£i trong [-180, 180] v√† vƒ© ƒë·ªô trong [-90, 90]"
      );
    }
  }

  try {
    const updatedCafe = await Cafe.findByIdAndUpdate(id, cafeData, {
      new: true,
      runValidators: true, // √Åp d·ª•ng validation t·ª´ schema
    });
    if (!updatedCafe) throw new Error("Kh√¥ng t√¨m th·∫•y qu√°n cafe v·ªõi ID: " + id);
    return updatedCafe;
  } catch (err) {
    throw new Error("L·ªói khi c·∫≠p nh·∫≠t qu√°n cafe: " + err.message);
  }
};

// üóëÔ∏è X√≥a qu√°n cafe
const deleteCafe = async (id) => {
  if (!id) throw new Error("ID qu√°n cafe kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
  try {
    const deletedCafe = await Cafe.findByIdAndDelete(id);
    if (!deletedCafe)
      throw new Error("Kh√¥ng t√¨m th·∫•y qu√°n cafe ƒë·ªÉ x√≥a v·ªõi ID: " + id);
    return deletedCafe;
  } catch (err) {
    throw new Error("L·ªói khi x√≥a qu√°n cafe: " + err.message);
  }
};

// üîé T√¨m qu√°n cafe g·∫ßn v·ªã tr√≠ ng∆∞·ªùi d√πng
const getCafesNearby = async (longitude, latitude, maxDistance = 5000) => {
  if (!longitude || !latitude) {
    throw new Error("Thi·∫øu t·ªça ƒë·ªô (longitude v√† latitude)!");
  }
  const lng = parseFloat(longitude);
  const lat = parseFloat(latitude);
  if (isNaN(lng) || isNaN(lat)) {
    throw new Error("T·ªça ƒë·ªô ph·∫£i l√† s·ªë h·ª£p l·ªá");
  }
  if (lng < -180 || lng > 180 || lat < -90 || lat > 90) {
    throw new Error(
      "T·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá: lng ph·∫£i trong [-180, 180] v√† lat trong [-90, 90]"
    );
  }

  try {
    const cafes = await Cafe.find({
      location: {
        $near: {
          $geometry: { type: "Point", coordinates: [lng, lat] },
          $maxDistance: parseInt(maxDistance),
        },
      },
    });
    return cafes;
  } catch (err) {
    throw new Error("L·ªói khi t√¨m qu√°n cafe g·∫ßn v·ªã tr√≠ c·ªßa b·∫°n: " + err.message);
  }
};
const updateCafeRating = async (cafeId) => {
  try {
    // L·∫•y t·∫•t c·∫£ review h·ª£p l·ªá (ch·ªâ ƒë·∫øm review c·ªßa user, kh√¥ng ƒë·∫øm admin)
    const reviews = await Review.find({ cafe: cafeId }).populate("user");
    const validReviews = reviews.filter(
      (review) => review.user.role === "user"
    );

    const reviewCount = validReviews.length;
    const averageRating = reviewCount
      ? validReviews.reduce((sum, review) => sum + review.rating, 0) /
        reviewCount
      : 0;

    // C·∫≠p nh·∫≠t rating v√† s·ªë l∆∞·ª£ng review
    await Cafe.findByIdAndUpdate(cafeId, {
      rating: Number(averageRating.toFixed(1)), // Chuy·ªÉn v·ªÅ s·ªë
      reviewCount: reviewCount,
      reviews: validReviews.map((r) => r._id), // ƒê·∫£m b·∫£o danh s√°ch review lu√¥n ƒë√∫ng
    });
  } catch (err) {
    throw new Error("L·ªói khi c·∫≠p nh·∫≠t rating: " + err.message);
  }
};

module.exports = {
  createCafe,
  getAllCafes,
  getCafeById,
  updateCafe,
  deleteCafe,
  getCafesNearby,
  updateCafeRating,
};
